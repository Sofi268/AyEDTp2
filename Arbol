template <class T> class Nodo {
public:
    T tipoDato;
    Nodo* der, * izq;
};

class Arbol {
private:
    Nodo* raiz; 
    void recorrerArbol(Nodo*& nodo, const string& usuario, vector<Comment>& comentariosUsuario); 
    void borrarPost(Nodo*& post,string titulo);
    void borrar(Nodo*& nodo, Post post);
    void bor(Nodo*& d,Nodo*& q);
public:
    Arbol() { raiz = NULL; }
    ~Arbol() {}
    void participacionUsuario(const string& usuario);
    vector<Comment> busquedaComentarios(const string& usuario, vector<Comment> comentariosUsuario);
    void recorrerPost(Nodo*& nodo, const string& usuario, vector<Comment>& comentariosUsuario);
    void RecorrerArbol(const string& usuario, const string& comentariosUsuario){recorrerArbol(raiz, usuario, comentariosUsuario);};
    void ordenComentariosInsercion(vector<Comment>& comentariosUsuario);
    void imprimirComentariosUsuario(const vector<Comment>& comentariosUsuario);
    bool fechaAnterior(const Fecha& i, const Fecha& x);
    void BorrarPost(Nodo*& post){borrarPost(raiz, post.TITULO);};
    void Borrar(Post post){borrar(raiz, post);};
};
void Arbol::recorrerPost(Nodo*& nodo, const string& usuario, vector<Comment>& comentariosUsuario) { 
    if (nodo != NULL) {
        if (nodo.UUSUARIO_COMMENT == usuario) {
            comentariosUsuario.push_back(x);
        }
        // Recorrer el sub치rbol izquierdo
        recorrerPost(nodo->izq, usuario, comentariosUsuario); 

        // Recorrer el sub치rbol derecho
        recorrerPost(nodo->der, usuario, comentariosUsuario); 
    }
}
void Arbol::recorrerArbol(Nodo*& nodo, const string& usuario, vector<Comment>& comentariosUsuario){
    if (nodo != NULL) {
        //Recorre los comentarios de cada post
        recorrerPost(nodo->izq, usuario, comentariosUsuario);

        //Recorre los post
        recorrerArbol(nodo->der, usuario, comentariosUsuario);
    }
}
vector<Comment> Arbol::busquedaComentarios(const string& usuario, vector<Comment> comentariosUsuario) {
    RecorrerArbol(usuario, comentariosUsuario); 
    return comentariosUsuario;
}
bool Arbol::fechaAnterior(const Fecha& i, const Fecha& x) {
    if (i.anio < x.anio) {
        return true;
    } else if (i.anio > x.anio) {
        return false;
    } else {
        if (i.mes < x.mes) {
            return true;
        } else if (i.mes > x.mes) {
            return false;
        } else {
            return i.dia < x.dia;
        }
    }
}
void Arbol::ordenComentariosInsercion(vector<Comment>& comentariosUsuario) {
    int cant = comentariosUsuario.size();
    for (int i = 1; i < cant; i++) {
        int j = i - 1;
        Fecha di = comentariosUsuario[i].FECHA;
        Fecha aj = comentariosUsuario[j].FECHA;
        while (j >= 0 && !fechaAnterior(di, aj)) {
            comentariosUsuario[j + 1] = comentariosUsuario[j];
            j--;
            if (j >= 0) {
                aj = comentariosUsuario[j].FECHA;
            }
        }
        comentariosUsuario[j + 1] = comentariosUsuario[i]; 
    }
}
void Arbol::imprimirComentariosUsuario(const vector<Comment>& comentariosUsuario) {
    for (const Comment& x : comentariosUsuario) {
        cout << "Fecha: " << x.FECHA.dia << "\n" << x.FECHA.mes << "\n" << x.FECHA.anio << "\n"
             <<"Post: "<<x.TITULO<< "\n"<< "Comentario: " << x.CONTENIDO << endl;
    }
}
void Arbol::participacionUsuario(const string& usuario) {
    vector<Comment> comentariosUsuario = NULL;
    comentariosUsuario = busquedaComentarios(usuario, comentariosUsuario);
    ordenComentariosInsercion(comentariosUsuario);
    cout << "Comentarios de " << usuario << ":" << endl;
    imprimirComentariosUsuario(comentariosUsuario);
}

void Arbol::borrarPostComentarios(Nodo*& comentario) { 
    if (comentario != NULL) {
        while(comentario->izq!=NULL){
        // Recorrer el sub치rbol izquierdo
        borrarPostComentarios(comentario->izq); 
        }
        delete comentario;
        while(comentario->der!=NULL){
        // Recorrer el sub치rbol derecho
        borrarPostComentarios(comentario->der); 
        }
        delete nodo;
    }
}
void Arbol::borrarPost(Nodo*& post, string titulo){
    if(post.TITULO==titulo){
    borrarPostComentarios(post->izq);
    Borrar(post);
    }
    else{
        borrarPost(post->der, titulo);
    }
    
}
void Arbol::bor(Nodo*& d, Nodo*& q) { 
    if (d->der != NULL) {
        bor(d->der, q); 
    } else {
        q->USUARIO_Post = d->USUARIO_Post; 
        q->CONTENIDO_Post = d->CONTENIDO_Post; 
        q->VALORACION_Post = d->VALORACION_Post; 
        q = d;
        d = d->izq;
    }
}
void Arbol::borrar(Nodo*& nodo, Post post){
    if (nodo == NULL) cout << "\n El Post NO esta\n\n";
    else if (post.TITULO != nodo->TITULO) borrar(nodo->der, post);
    else {// lo encontre en el nodo p
        Nodo* q;
        q = nodo;
        if (q->der == NULL) nodo = q->izq;// raiz<=raiz del subarbol izq
        else if (q->izq == NULL) nodo = q->der;//raiz<=raiz del subarbol der
        else bor(q->izq, q);//busca en el sub arbol izq
        delete q;
    }
}
