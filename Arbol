
class Nodo {
public:
    Post post;
    Nodo* der;
    Nodo* izq;
};

class Arbol {
private:
    Nodo* raiz;
    void borrar(Nodo*& n, const string& titulo);
    void bor(Nodo*& d, Nodo*& q); // Agregado: Parámetro q
    void recorrerArbol(Nodo* nodo, const string& usuario, vector<Comment>& comentariosUsuario, Nodo*& q); // Agregado: Parámetro q

public:
    Arbol() { raiz = nullptr; }
    ~Arbol() {}
    void Borrar(const Post& p) { borrar(raiz, p.TITULO); }
    void participacionUsuario(const string& usuario);
    void busquedaComentarios(const string& usuario, vector<Comment>& comentariosUsuario);
    void ordenComentariosInsercion(vector<Comment>& comentariosUsuario);
    void imprimirComentariosUsuario(const vector<Comment>& comentariosUsuario);
    bool fechaAnterior(const Fecha& i, const Fecha& x);
};

void Arbol::borrar(Nodo*& n, const string& titulo) {
    if (n == nullptr) {
        cout << "\nEl post NO está\n\n";
    } else if (titulo < n->post.TITULO) {
        borrar(n->izq, titulo);
    } else if (titulo > n->post.TITULO) {
        borrar(n->der, titulo);
    } else {
        Nodo* q;
        q = n;
        if (n->der == nullptr) {
            n = n->izq;
        } else if (q->izq == nullptr) {
            n = q->der;
        } else {
            bor(q->izq, q); // Agregado: Pasar q como parámetro
        }
        delete q;
    }
}

void Arbol::bor(Nodo*& d, Nodo*& q) { // Agregado: Parámetro q
    if (d->der != nullptr) {
        bor(d->der, q); // Agregado: Pasar q como parámetro
    } else {
        q->post = d->post;
        q = d;
        d = d->izq;
    }
}

void Arbol::participacionUsuario(const string& usuario) {
    vector<Comment> comentariosUsuario;
    Nodo* q = nullptr; // Agregado: Variable q
    busquedaComentarios(usuario, comentariosUsuario);
    ordenComentariosInsercion(comentariosUsuario);
    cout << "Comentarios de " << usuario << ":" << endl;
    imprimirComentariosUsuario(comentariosUsuario);
}

void Arbol::busquedaComentarios(const string& usuario, vector<Comment>& comentariosUsuario) {
    Nodo* q = nullptr; // Agregado: Variable q
    recorrerArbol(raiz, usuario, comentariosUsuario, q); // Agregado: Pasar q como parámetro
}

void Arbol::ordenComentariosInsercion(vector<Comment>& comentariosUsuario) {
    int cant = comentariosUsuario.size();
    for (int i = 1; i < cant; i++) {
        int j = i - 1;
        Fecha di = comentariosUsuario[i].fecha;
        Fecha aj = comentariosUsuario[j].fecha;
        while (j >= 0 && !fechaAnterior(di, aj)) {
            comentariosUsuario[j + 1] = comentariosUsuario[j];
            j--;
            if (j >= 0) {
                aj = comentariosUsuario[j].fecha;
            }
        }
        comentariosUsuario[j + 1] = comentariosUsuario[i]; // Corregido: Asignar comentariosUsuario[i]
    }
}

void Arbol::imprimirComentariosUsuario(const vector<Comment>& comentariosUsuario) {
    for (const Comment& x : comentariosUsuario) {
        cout << "Fecha: " << x.fecha.dia << "/" << x.fecha.mes << "/" << x.fecha.anio << "\n"
             << "Comentario: " << x.contenido << endl;
    }
}

bool Arbol::fechaAnterior(const Fecha& i, const Fecha& x) {
    if (i.anio < x.anio) {
        return true;
    } else if (i.anio > x.anio) {
        return false;
    } else {
        if (i.mes < x.mes) {
            return true;
        } else if (i.mes > x.mes) {
            return false;
        } else {
            return i.dia < x.dia;
        }
    }
}

void Arbol::recorrerArbol(Nodo* nodo, const string& usuario, vector<Comment>& comentariosUsuario, Nodo*& q) { // Agregado: Parámetro q
    if (nodo != nullptr) {
        // Verificar si el post actual tiene comentarios del usuario requerido
        for (const Comment& x : nodo->post.comentarios) {
            if (x.USUARIO == usuario) {
                comentariosUsuario.push_back(x);
            }
        }

        // Recorrer el subárbol izquierdo
        recorrerArbol(nodo->izq, usuario, comentariosUsuario, q); // Agregado: Pasar q como parámetro

        // Recorrer el subárbol derecho
        recorrerArbol(nodo->der, usuario, comentariosUsuario, q); // Agregado: Pasar q como parámetro
    }
}
