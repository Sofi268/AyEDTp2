template <class T> class Nodo {
public:
    T tipoDato;
    Nodo* der, * izq;
};

class Arbol {
private:
    Nodo* raiz; 
    void recorrerArbol(Nodo* nodo, const string& usuario, vector<Comment>& comentariosUsuario); 

public:
    Arbol() { raiz = NULL; }
    ~Arbol() {}
    void participacionUsuario(const string& usuario);
    vector<Comment> busquedaComentarios(const string& usuario);
    void recorrerPost(Nodo* nodo, const string& usuario, vector<Comment>& comentariosUsuario);
    void RecorrerArbol(usuario, comentariosUsuario){recorrerArbol(raiz, usuario, comentariosUsuario);};
    void ordenComentariosInsercion(vector<Comment>& comentariosUsuario);
    void imprimirComentariosUsuario(const vector<Comment>& comentariosUsuario);
    bool fechaAnterior(const Fecha& i, const Fecha& x);
};
void Arbol::recorrerPost(Nodo* nodo, const string& usuario, vector<Comment>& comentariosUsuario) { 
    if (nodo != NULL) {
        if (nodo.USUARIO == usuario) {
            comentariosUsuario.push_back(x);
        }
        // Recorrer el subárbol izquierdo
        recorrerPost(nodo->izq, usuario, comentariosUsuario); 

        // Recorrer el subárbol derecho
        recorrerPost(nodo->der, usuario, comentariosUsuario); 
    }
}
void Arbol::recorrerArbol(Nodo* nodo, const string& usuario, vector<Comment>& comentariosUsuario){

    //Recorre los comentarios de cada post
    recorrerPost(nodo->izq, usuario, comentariosUsuario);

    //Recorre los post
    recorrerArbol(nodo->der, usuario, comentariosUsuario);
    
}
vector<Comment> Arbol::busquedaComentarios(const string& usuario) {
    RecorrerArbol(usuario, comentariosUsuario); 
    return comentariosUsuario;
}
bool Arbol::fechaAnterior(const Fecha& i, const Fecha& x) {
    if (i.anio < x.anio) {
        return true;
    } else if (i.anio > x.anio) {
        return false;
    } else {
        if (i.mes < x.mes) {
            return true;
        } else if (i.mes > x.mes) {
            return false;
        } else {
            return i.dia < x.dia;
        }
    }
}
void Arbol::ordenComentariosInsercion(vector<Comment>& comentariosUsuario) {
    int cant = comentariosUsuario.size();
    for (int i = 1; i < cant; i++) {
        int j = i - 1;
        Fecha di = comentariosUsuario[i].FECHA;
        Fecha aj = comentariosUsuario[j].FECHA;
        while (j >= 0 && !fechaAnterior(di, aj)) {
            comentariosUsuario[j + 1] = comentariosUsuario[j];
            j--;
            if (j >= 0) {
                aj = comentariosUsuario[j].FECHA;
            }
        }
        comentariosUsuario[j + 1] = comentariosUsuario[i]; 
    }
}
void Arbol::imprimirComentariosUsuario(const vector<Comment>& comentariosUsuario) {
    for (const Comment& x : comentariosUsuario) {
        cout << "Fecha: " << x.FECHA.dia << "/" << x.FECHA.mes << "/" << x.FECHA.anio << "\n"
             <<"Post: "<<x.TITULO<< "Comentario: " << x.CONTENIDO << endl;
    }
}
void Arbol::participacionUsuario(const string& usuario) {
    vector<Comment> comentariosUsuario = NULL;
    comentariosUsuario = busquedaComentarios(usuario, comentariosUsuario);
    ordenComentariosInsercion(comentariosUsuario);
    cout << "Comentarios de " << usuario << ":" << endl;
    imprimirComentariosUsuario(comentariosUsuario);
}
